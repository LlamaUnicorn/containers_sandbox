When you stop a container the data within it persists.
When the container is removed the data within it is gone too.

Types of storage:
- tmpfs mounts are stored in host's memory. Once the container is stopped the data is gone. Best for containers that generate data that doesn't need to be stored.
docker run -it --name docker-tmpfs-test --tmpfs /tmpfs-mount ubuntu bash
docker inspect docker-tmpfs-test | jq ".[0].HostConfig.Tmpfs"

- bind mounts: host's directory is mounted into the container. Best for running production containers with source bind mounts. No need to rebuild the image on change.
docker run -it --name bind-mount-container -v $HOME:/host-home ubuntu bash
docker inspect bind-mount-container | jq ".[0].Mounts"

Inspect bind mount:
docker run -it --name bind-mount-container -v $HOME:/host-home ubuntu bash
cd /host-home
ls
echo "This is a file created from container having kernel 'uname -r'" > host-home-file.txt

Safety tip: since the host is vulnerable to changes made in a container you can bind mount in read-only mode :ro.
docker run -it --name read-only-bind-mount -v %HOME:/host-home:ro ubuntu bash

- volumes are recommended method of persistent data storage.
Volumes are managed by Docker. Can be shared between multiple containers.

Volume subcommands
docker volume create	- create named volume
	docker volume create --name=custom_name --label=custom_metadata
docker volume inspect	- displays detailed information. Useful to get volume's location for copy/backup.
	docker volume --inspect volume_name
docker volume ls	- shows volumes list
docker volume prune	- removes all unused (by at least one container) local volumes
	docker volume prune --force	- will not ask for confirmation
docker volume rm	- removes volumes. When the volume is attached to the container you will get an error.
	docker volume rm <image_name>
	'unable to remove volume: volume is in use - [6074757a]
	docker volume inspect 6074757a


Create a container with a volume attached. Create volume named 'data' and put it in 'data' inside the container:
docker run --name container-with-volume -v data:/data ubuntu

Create a volume named 'info':
docker volume create info
docker volume inspect info

Refer the created volume:
docker run -it --name info-container -v info:/container-info ununtu

The data within the volume persists when volume is mounted in different containers.
